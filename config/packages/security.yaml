security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: argon2i
            memory_cost: 65536 
            time_cost: 4       

       
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main_Support:
            pattern: ^/Support/
            custom_authenticators:
                - App\Security\SupportLoginFormAuthenticator
            logout:
                path: app_logout_Support
                target: app_back_Support

            user_checker: security.user_checker

            context: shared_session

        main:
            lazy: true
            provider: app_user_provider

            custom_authenticators:
                - App\Security\LoginFormAuthenticator

            logout:
                path: app_logout
                target: /login

            context: shared_session

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/Support/login$, roles: PUBLIC_ACCESS}
        - { path: ^/Support, roles: ROLE_SUPPORT }
        - { path: ^/Admin, roles: [ROLE_ADMIN, ROLE_SUPPORT] }
        - { path: ^/forgot, roles: PUBLIC_ACCESS }
        # - { path: ^/, roles: ROLE_ADMIN }
        # - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        enable_authenticator_manager: true

        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
