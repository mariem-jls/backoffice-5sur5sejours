# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    photos_directory: '%kernel.project_dir%/public/photos'
    produit_directory: '%kernel.project_dir%/public/images/produits'
    
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $session: '@session'

    session:
        class: Symfony\Component\HttpFoundation\Session\Session
        public: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    

    App\Controller\HomeController:
        arguments:
            $session: '@session'
            $em: '@doctrine'
            $homeService: '@App\Service\HomeService'

    App\Service\UserService:
        arguments:
            $em: '@doctrine'
            $userRepository: '@App\Repository\UserRepository'
            $router: '@router.default'
            $passwordEncoder: '@security.password_hasher'
            $templating: '@twig'
            $session: '@session'
            $params: '@parameter_bag'
            # $validator: '@validator'
    
    App\Service\StatistiqueService:
        public: true
        arguments:
            $container: '@service_container'
    
    App\Service\EncryptionService:
        arguments: []

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        # calls:
            # - [['@abstract_controller.locator']]

    App\Service\TypeProduiteService: ~
    
    App\Service\SejourService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\EtablissementService:
        arguments:
            $em: '@doctrine'

    App\Service\SupportService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\BlogService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\EmailingService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\ParentService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\SmsService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\AttachementService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\SiteService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\EmailsCmdService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\PrinterService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\PhotosFavorisService:
        arguments:
            $em: '@doctrine.orm.entity_manager'

    App\Service\HomeService:
        arguments:
            $doctrine: '@doctrine'
            $formFactory: '@form.factory'
            $templating: '@twig'

    App\Service\ResendEmailService:
        arguments:
            $apiKey: '%env(RESEND_API_KEY)%'
    
    App\Service\ComandeService:
        arguments:
            $em: '@doctrine.orm.entity_manager'
            
    App\Controller\UtilisateurController:
        arguments:
            $userService: '@App\Service\UserService'
            $validator: '@validator'
            $serializer: '@serializer'

    App\Twig\AppExtension:
        arguments: ['@security.helper']
        tags: ['twig.extension']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
